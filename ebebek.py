import requests
import pandas as pd
from datetime import datetime
import getpass
from colorama import Fore, Style, init
from openpyxl import Workbook
from openpyxl.styles import Alignment, Font, PatternFill, Border, Side
from openpyxl.utils import get_column_letter
import os
import sys
import io
from dotenv import load_dotenv

# .env dosyasƒ±nƒ± y√ºkle
load_dotenv()

# Windows encoding ve terminal d√ºzeltmesi (exe √ßƒ±ktƒ±sƒ± i√ßin)
if sys.platform == 'win32':
    import codecs
    sys.stdout = codecs.getwriter('utf-8')(sys.stdout.buffer)
    sys.stderr = codecs.getwriter('utf-8')(sys.stderr.buffer)
    # Terminal geni≈üliƒüini ayarla
    os.system('mode con: cols=80 lines=30')

# `colorama`'yƒ± ba≈ülatƒ±yoruz
init(autoreset=True)

# Google Sheets'ten ≈üifre √ßekme fonksiyonu
def get_password_from_sheets():
    # Sheet ID'yi environment variable'dan al
    sheet_id = os.getenv('SHEET_ID')
    if not sheet_id:
        print(Fore.RED + "‚úó HATA: SHEET_ID .env dosyasƒ±nda tanƒ±mlƒ± deƒüil!")
        return None
    
    url = f"https://docs.google.com/spreadsheets/d/{sheet_id}/gviz/tq?tqx=out:csv&sheet=Sheet1"
    
    try:
        response = requests.get(url, timeout=5)
        if response.status_code == 200:
            # CSV verisini oku
            lines = response.text.strip().split('\n')
            if len(lines) > 0:
                # ƒ∞lk satƒ±r (B1 h√ºcresi ikinci s√ºtun)
                first_row = lines[0].split(',')
                if len(first_row) > 1:
                    # Tƒ±rnak i≈üaretlerini temizle
                    password = first_row[1].strip('"').strip()
                    return password
        return None
    except Exception as e:
        print(Fore.RED + f"‚úó ≈ûifre alƒ±namadƒ±: {e}")
        return None

# ≈ûifreli giri≈ü fonksiyonu
def user_login():
    # .env dosyasƒ±ndan ≈üifre kontrol√ºn√ºn aktif olup olmadƒ±ƒüƒ±nƒ± kontrol et
    # Varsayƒ±lan: false (Demo modu aktif)
    password_enabled = os.getenv('PASSWORD_ENABLED', 'false').lower() == 'true'
    
    if not password_enabled:
        print(Fore.GREEN + Style.BRIGHT + """
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë                                                            ‚ïë
    ‚ïë           üè™  EBEBEK BARKOD TAKƒ∞P Sƒ∞STEMƒ∞  üì¶              ‚ïë
    ‚ïë                                                            ‚ïë
    ‚ïë                  ‚ö°  DEMO MODU AKTƒ∞F  ‚ö°                    ‚ïë
    ‚ïë                                                            ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """ + Style.RESET_ALL)
        print(Fore.CYAN + "    ‚ÑπÔ∏è  ≈ûifre kontrol√º devre dƒ±≈üƒ±. Direkt kullanƒ±ma ge√ßiliyor...\n")
        return
    
    # ≈ûifre kontrol√º aktifse
    # Google Sheets'ten ≈üifreyi √ßek
    print(Fore.CYAN + "\n" + "‚ïê" * 60)
    print(Fore.CYAN + "üîí  ≈ûifre Google Sheets'ten y√ºkleniyor..." + Style.RESET_ALL)
    
    correct_password = get_password_from_sheets()
    
    if correct_password is None:
        print(Fore.RED + "‚úó HATA: ≈ûifre y√ºklenemedi! ƒ∞nternet baƒülantƒ±nƒ±zƒ± kontrol edin.")
        print(Fore.YELLOW + "‚ö†  Program sonlandƒ±rƒ±lƒ±yor...")
        sys.exit()
    
    print(Fore.GREEN + f"‚úì ≈ûifre ba≈üarƒ±yla y√ºklendi!\n")
    
    # Modern ASCII Art Ba≈ülƒ±k
    print(Fore.CYAN + Style.BRIGHT + """
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë                                                            ‚ïë
    ‚ïë           üè™  EBEBEK BARKOD TAKƒ∞P Sƒ∞STEMƒ∞  üì¶              ‚ïë
    ‚ïë                                                            ‚ïë
    ‚ïë                    üîê  G√úVENLƒ∞ Gƒ∞Rƒ∞≈û                       ‚ïë
    ‚ïë                                                            ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """ + Style.RESET_ALL)
    
    attempt = 0
    while True:
        attempt += 1
        entered_password = getpass.getpass(Fore.YELLOW + f"    üîë ≈ûifre (Deneme {attempt}): " + Style.RESET_ALL)
        
        if entered_password == correct_password:
            print(Fore.GREEN + Style.BRIGHT + "\n    ‚úì Gƒ∞Rƒ∞≈û BA≈ûARILI! Ho≈ü Geldiniz! üéâ\n")
            break
        else:
            print(Fore.RED + "    ‚úó Yanlƒ±≈ü ≈üifre! L√ºtfen tekrar deneyin.\n")

# Barkodlarƒ± ve adetleri tutmak i√ßin s√∂zl√ºkler
barkodsuz_dict = {}
kayƒ±tsƒ±z_list = []
hasarli_dict = {}

# G√ºn√ºn tarihi
today_date = datetime.now().strftime("%d.%m.%Y")

# API URL'si
url = "https://ebebek.wawlabs.com/autocomplete"

# Benzersiz dosya adƒ± olu≈üturma fonksiyonu
def get_unique_filename():
    base_name = f"EBEBEK {today_date}"
    extension = ".xlsx"
    file_name = base_name + extension
    
    if not os.path.exists(file_name):
        return file_name
    
    counter = 1
    while True:
        file_name = f"{base_name} ({counter}){extension}"
        if not os.path.exists(file_name):
            return file_name
        counter += 1

# Modern ho≈ügeldin ekranƒ± ve ana men√º
def welcome_screen():
    os.system('cls' if os.name == 'nt' else 'clear')  # Ekranƒ± temizle
    
    print(Fore.CYAN + Style.BRIGHT + """
    +================================================================+
    |                                                              |
    |          üè™  EBEBEK BARKOD TAKƒ∞P Sƒ∞STEMƒ∞ v2.0  üì¶            |
    |                                                              |
    |              ‚ö° Hƒ±zlƒ± ‚Ä¢ G√ºvenli ‚Ä¢ Profesyonel ‚ö°              |
    |                                                              |
    +================================================================+
    """ + Style.RESET_ALL)
    
    print(Fore.WHITE + "    üìÖ Tarih        : " + Fore.YELLOW + Style.BRIGHT + today_date)
    print(Fore.WHITE + "    üìä Sistem Durumu: " + Fore.GREEN + Style.BRIGHT + "‚óè Aktif ve Hazƒ±r" + Style.RESET_ALL)
    print(Fore.WHITE + "    üíæ Veri Tabanƒ±  : " + Fore.GREEN + Style.BRIGHT + "‚úì Baƒülƒ±\n" + Style.RESET_ALL)
    
    print(Fore.CYAN + Style.BRIGHT + "    +=======================================================+")
    print(Fore.CYAN + "    |" + Fore.WHITE + Style.BRIGHT + "                   üìã ƒ∞≈ûLEM MEN√úS√ú                   " + Fore.CYAN + "|")
    print(Fore.CYAN + "    +=======================================================+")
    print(Fore.CYAN + "    |                                                       |")
    print(Fore.CYAN + "    |  " + Fore.GREEN + Style.BRIGHT + "„Äê1„Äë" + Style.RESET_ALL + Fore.WHITE + " ‚ûú  üè∑Ô∏è  Barkodsuzlar " + Fore.CYAN + "‚îÇ" + Fore.WHITE + " 11-13 haneli barkod   " + Fore.CYAN + "|")
    print(Fore.CYAN + "    |  " + Fore.GREEN + Style.BRIGHT + "„Äê2„Äë" + Style.RESET_ALL + Fore.WHITE + " ‚ûú  ‚ùì Kayƒ±tsƒ±zlar  " + Fore.CYAN + "‚îÇ" + Fore.WHITE + " EBHJ ile ba≈ülayan     " + Fore.CYAN + "|")
    print(Fore.CYAN + "    |  " + Fore.GREEN + Style.BRIGHT + "„Äê3„Äë" + Style.RESET_ALL + Fore.WHITE + " ‚ûú  ‚ö†Ô∏è  Hasarlƒ±lar   " + Fore.CYAN + "‚îÇ" + Fore.WHITE + " 11-13 haneli barkod   " + Fore.CYAN + "|")
    print(Fore.CYAN + "    |  " + Fore.RED + Style.BRIGHT + "„Äê4„Äë" + Style.RESET_ALL + Fore.WHITE + " ‚ûú  üíæ Kaydet & √áƒ±k " + Fore.CYAN + "‚îÇ" + Fore.WHITE + " Excel dosyasƒ± olu≈ütur " + Fore.CYAN + "|")
    print(Fore.CYAN + "    |                                                       |")
    print(Fore.CYAN + "    +=======================================================+\n" + Style.RESET_ALL)
    
    # ƒ∞statistikler
    toplam = len(barkodsuz_dict) + len(kayƒ±tsƒ±z_list) + len(hasarli_dict)
    
    print(Fore.YELLOW + Style.BRIGHT + "    +=======================================================+")
    print(Fore.YELLOW + "    |" + Fore.WHITE + Style.BRIGHT + "               üìä G√úNCEL ƒ∞STATƒ∞STƒ∞KLER                " + Fore.YELLOW + "|")
    print(Fore.YELLOW + "    +=======================================================+")
    
    # Barkodsuzlar √ßubuƒüu
    bar_count = len(barkodsuz_dict)
    bar_visual = "‚ñà" * min(bar_count, 20)
    print(Fore.YELLOW + "    |  " + Fore.WHITE + "üè∑Ô∏è  Barkodsuzlar" + Fore.CYAN + f"  : {Fore.GREEN}{bar_count:>3} √ºr√ºn  " + Fore.GREEN + f"{bar_visual:<20}" + Fore.YELLOW + "  |")
    
    # Kayƒ±tsƒ±zlar √ßubuƒüu
    kayit_count = len(kayƒ±tsƒ±z_list)
    kayit_visual = "‚ñà" * min(kayit_count, 20)
    print(Fore.YELLOW + "    |  " + Fore.WHITE + "‚ùì Kayƒ±tsƒ±zlar " + Fore.CYAN + f"  : {Fore.GREEN}{kayit_count:>3} barkod" + Fore.GREEN + f" {kayit_visual:<20}" + Fore.YELLOW + "  |")
    
    # Hasarlƒ±lar √ßubuƒüu
    hasar_count = len(hasarli_dict)
    hasar_visual = "‚ñà" * min(hasar_count, 20)
    print(Fore.YELLOW + "    |  " + Fore.WHITE + "‚ö†Ô∏è  Hasarlƒ±lar  " + Fore.CYAN + f"  : {Fore.GREEN}{hasar_count:>3} √ºr√ºn  " + Fore.GREEN + f"{hasar_visual:<20}" + Fore.YELLOW + "  |")
    
    print(Fore.YELLOW + "    +=======================================================+")
    print(Fore.YELLOW + "    |  " + Fore.WHITE + Style.BRIGHT + f"üì¶ TOPLAM KAYIT : {Fore.CYAN}{toplam:>3} adet                          " + Fore.YELLOW + "|")
    print(Fore.YELLOW + "    +=======================================================+\n" + Style.RESET_ALL)

# Barkodsuzlar i≈ülemi
def barkodsuzlar():
    while True:
        print(Fore.YELLOW + Style.BRIGHT + "\n    +=======================================================+")
        print(Fore.YELLOW + "    |      üè∑Ô∏è  BARKODSUZLAR KATEGORƒ∞Sƒ∞                 |")
        print(Fore.YELLOW + "    +=======================================================+")
        print(Fore.YELLOW + "    |  " + Fore.WHITE + "üìå Barkod: 11 veya 13 haneli sayƒ± giri≈üi     " + Fore.YELLOW + "|")
        print(Fore.YELLOW + "    |  " + Fore.WHITE + "üîô √áƒ±kƒ±≈ü : Men√ºye d√∂nmek i√ßin 'q' yazƒ±n      " + Fore.YELLOW + "|")
        print(Fore.YELLOW + "    +=======================================================+\n" + Style.RESET_ALL)
        
        barkod = input(Fore.WHITE + "    üì• Barkod numarasƒ±nƒ± girin (men√º i√ßin 'q'): " + Style.RESET_ALL).strip()

        if barkod.lower() in ['q', 'menu']:
            break

        if (len(barkod) not in [11, 13]) or not barkod.isdigit():
            print(Fore.RED + "    ‚úó Hata: Barkod 11 veya 13 haneli rakam olmalƒ±dƒ±r!")
            continue

        response = requests.get(f"{url}?q={barkod}")
        if response.status_code == 200:
            data = response.json()

            if "products" in data and len(data["products"]) > 0:
                product = data["products"][0]
                brand = product.get("brand", "Marka bulunamadƒ±")
                product_name = product.get("title", "√úr√ºn adƒ± bulunamadƒ±")

                if barkod in barkodsuz_dict:
                    barkodsuz_dict[barkod]["ADET"] += 1
                    print(Fore.YELLOW + f"    ‚ÑπÔ∏è  Bu barkod mevcut! Adet artƒ±rƒ±ldƒ±.")
                else:
                    barkodsuz_dict[barkod] = {"TARƒ∞H": today_date, "ƒ∞√áERƒ∞K": f"{brand} - {product_name}", "ADET": 1}

                print(Fore.GREEN + f"    ‚úì √úr√ºn: {product_name}")
                print(Fore.GREEN + f"    ‚úì Adet: {barkodsuz_dict[barkod]['ADET']}")
            else:
                print(Fore.RED + f"    ‚úó {barkod} i√ßin √ºr√ºn bulunamadƒ±.")
        else:
            print(Fore.RED + f"    ‚úó API hatasƒ±: {response.status_code}")

# Kayƒ±tsƒ±zlar i≈ülemi
def kayƒ±tsƒ±zlar():
    while True:
        print(Fore.YELLOW + Style.BRIGHT + "\n    +=======================================================+")
        print(Fore.YELLOW + "    |      ‚ùì  KAYITSIZLAR KATEGORƒ∞Sƒ∞                  |")
        print(Fore.YELLOW + "    +=======================================================+")
        print(Fore.YELLOW + "    |  " + Fore.WHITE + "üìå Format: EBHJ ile ba≈ülayan 14 karakter     " + Fore.YELLOW + "|")
        print(Fore.YELLOW + "    |  " + Fore.WHITE + "üìù √ñrnek : EBHJ1003942527                    " + Fore.YELLOW + "|")
        print(Fore.YELLOW + "    |  " + Fore.WHITE + "üîô √áƒ±kƒ±≈ü : Men√ºye d√∂nmek i√ßin 'q' yazƒ±n      " + Fore.YELLOW + "|")
        print(Fore.YELLOW + "    +=======================================================+\n" + Style.RESET_ALL)
        
        barkod = input(Fore.WHITE + "    üì• Barkod numarasƒ±nƒ± girin (men√º i√ßin 'q'): " + Style.RESET_ALL).strip()

        if barkod.lower() in ['q', 'menu']:
            break

        if not barkod.startswith("EBHJ") or len(barkod) != 14:
            print(Fore.RED + "    ‚úó Hata: Barkod 'EBHJ' ile ba≈ülamalƒ± ve 14 karakter olmalƒ±!")
            continue

        if barkod in kayƒ±tsƒ±z_list:
            print(Fore.YELLOW + f"    ‚ÑπÔ∏è  Bu barkod zaten kayƒ±tlƒ±!")
        else:
            kayƒ±tsƒ±z_list.append(barkod)
            print(Fore.GREEN + f"    ‚úì Barkod kaydedildi: {barkod}")
            print(Fore.CYAN + f"    üìä Toplam: {len(kayƒ±tsƒ±z_list)} barkod")

# Hasarlƒ±lar i≈ülemi
def hasarlilar():
    while True:
        print(Fore.RED + Style.BRIGHT + "\n    +=======================================================+")
        print(Fore.RED + "    |      ‚ö†Ô∏è  HASARLILAR KATEGORƒ∞Sƒ∞                   |")
        print(Fore.RED + "    +=======================================================+")
        print(Fore.RED + "    |  " + Fore.WHITE + "üìå Barkod: 11 veya 13 haneli sayƒ± giri≈üi     " + Fore.RED + "|")
        print(Fore.RED + "    |  " + Fore.WHITE + "üîô √áƒ±kƒ±≈ü : Men√ºye d√∂nmek i√ßin 'q' yazƒ±n      " + Fore.RED + "|")
        print(Fore.RED + "    +=======================================================+\n" + Style.RESET_ALL)
        
        barkod = input(Fore.WHITE + "    üì• Barkod numarasƒ±nƒ± girin (men√º i√ßin 'q'): " + Style.RESET_ALL).strip()

        if barkod.lower() in ['q', 'menu']:
            break

        if (len(barkod) not in [11, 13]) or not barkod.isdigit():
            print(Fore.RED + "    ‚úó Hata: Barkod 11 veya 13 haneli rakam olmalƒ±dƒ±r!")
            continue

        response = requests.get(f"{url}?q={barkod}")
        if response.status_code == 200:
            data = response.json()

            if "products" in data and len(data["products"]) > 0:
                product = data["products"][0]
                brand = product.get("brand", "Marka bulunamadƒ±")
                product_name = product.get("title", "√úr√ºn adƒ± bulunamadƒ±")

                if barkod in hasarli_dict:
                    hasarli_dict[barkod]["ADET"] += 1
                    print(Fore.YELLOW + f"    ‚ÑπÔ∏è  Bu barkod mevcut! Adet artƒ±rƒ±ldƒ±.")
                else:
                    hasarli_dict[barkod] = {"TARƒ∞H": today_date, "ƒ∞√áERƒ∞K": f"{brand} - {product_name}", "ADET": 1}

                print(Fore.GREEN + f"    ‚úì √úr√ºn: {product_name}")
                print(Fore.GREEN + f"    ‚úì Adet: {hasarli_dict[barkod]['ADET']}")
            else:
                print(Fore.RED + f"    ‚úó {barkod} i√ßin √ºr√ºn bulunamadƒ±.")
        else:
            print(Fore.RED + f"    ‚úó API hatasƒ±: {response.status_code}")

# Excel dosyasƒ±na veri kaydetme
def save_to_excel():
    if not barkodsuz_dict and not kayƒ±tsƒ±z_list and not hasarli_dict:
        print(Fore.YELLOW + "\n    ‚ö†Ô∏è  Hi√ß veri girilmedi! Excel dosyasƒ± olu≈üturulmadƒ±.")
        return

    file_name = get_unique_filename()
    
    wb = Workbook()
    wb.remove(wb.active)

    header_fill = PatternFill(start_color="FFFF00", end_color="FFFF00", fill_type="solid")
    subheader_fill = PatternFill(start_color="00B0F0", end_color="00B0F0", fill_type="solid")
    header_font = Font(bold=True, size=12)
    border = Border(left=Side(style='thin'), right=Side(style='thin'),
                   top=Side(style='thin'), bottom=Side(style='thin'))
    center_align = Alignment(horizontal="center", vertical="center")

    # 1. BARKODSUZLAR
    if barkodsuz_dict:
        ws1 = wb.create_sheet("BARKODSUZLAR")
        ws1.merge_cells('A1:C1')
        ws1['A1'] = "EBEBEK BARKODSUZLAR ≈ûABLONU"
        ws1['A1'].fill = header_fill
        ws1['A1'].font = header_font
        ws1['A1'].alignment = center_align
        
        ws1['A2'] = "TARƒ∞H"
        ws1['B2'] = "ƒ∞√áERƒ∞K"
        ws1['C2'] = "ADET"
        for cell in ['A2', 'B2', 'C2']:
            ws1[cell].fill = subheader_fill
            ws1[cell].font = Font(bold=True)
            ws1[cell].alignment = center_align
        
        row = 3
        for barkod, data in barkodsuz_dict.items():
            ws1[f'A{row}'] = data['TARƒ∞H']
            ws1[f'B{row}'] = data['ƒ∞√áERƒ∞K']
            ws1[f'C{row}'] = data['ADET']
            ws1[f'C{row}'].alignment = center_align
            row += 1
        
        for row in ws1.iter_rows(min_row=1, max_row=ws1.max_row, min_col=1, max_col=3):
            for cell in row:
                cell.border = border
        
        ws1.column_dimensions['A'].width = 12
        ws1.column_dimensions['B'].width = 70
        ws1.column_dimensions['C'].width = 10

    # 2. KAYITSIZLAR
    if kayƒ±tsƒ±z_list:
        ws2 = wb.create_sheet("KAYITSIZLAR")
        ws2.merge_cells('A1:C1')
        ws2['A1'] = "KAYITSIZLAR"
        ws2['A1'].fill = header_fill
        ws2['A1'].font = header_font
        ws2['A1'].alignment = center_align
        
        ws2['A2'] = "BARKODLAR"
        ws2['B2'] = "BARKODLAR"
        ws2['C2'] = "BARKODLAR"
        for cell in ['A2', 'B2', 'C2']:
            ws2[cell].fill = subheader_fill
            ws2[cell].font = Font(bold=True)
            ws2[cell].alignment = center_align
        
        row = 3
        col = 0
        for barkod in kayƒ±tsƒ±z_list:
            col_letter = get_column_letter(col + 1)
            ws2[f'{col_letter}{row}'] = barkod
            ws2[f'{col_letter}{row}'].alignment = center_align
            col += 1
            if col == 3:
                col = 0
                row += 1
        
        for row in ws2.iter_rows(min_row=1, max_row=ws2.max_row, min_col=1, max_col=3):
            for cell in row:
                cell.border = border
        
        ws2.column_dimensions['A'].width = 18
        ws2.column_dimensions['B'].width = 18
        ws2.column_dimensions['C'].width = 18

    # 3. HASARLILAR
    if hasarli_dict:
        ws3 = wb.create_sheet("HASARLILAR")
        ws3.merge_cells('A1:C1')
        ws3['A1'] = "EBEBEK HASARLILAR"
        ws3['A1'].fill = header_fill
        ws3['A1'].font = header_font
        ws3['A1'].alignment = center_align
        
        ws3['A2'] = "TARƒ∞H"
        ws3['B2'] = "ƒ∞√áERƒ∞K"
        ws3['C2'] = "ADET"
        for cell in ['A2', 'B2', 'C2']:
            ws3[cell].fill = subheader_fill
            ws3[cell].font = Font(bold=True)
            ws3[cell].alignment = center_align
        
        row = 3
        for barkod, data in hasarli_dict.items():
            ws3[f'A{row}'] = data['TARƒ∞H']
            ws3[f'B{row}'] = data['ƒ∞√áERƒ∞K']
            ws3[f'C{row}'] = data['ADET']
            ws3[f'C{row}'].alignment = center_align
            row += 1
        
        for row in ws3.iter_rows(min_row=1, max_row=ws3.max_row, min_col=1, max_col=3):
            for cell in row:
                cell.border = border
        
        ws3.column_dimensions['A'].width = 12
        ws3.column_dimensions['B'].width = 70
        ws3.column_dimensions['C'].width = 10

    wb.save(file_name)
    print(Fore.GREEN + f"\n    ‚úì Dosya kaydedildi: '{file_name}'")
    print(Fore.CYAN + f"\n    üìä √ñZET RAPOR:")
    if barkodsuz_dict:
        print(Fore.CYAN + f"       üè∑Ô∏è  Barkodsuzlar : {len(barkodsuz_dict)} √ºr√ºn")
    if kayƒ±tsƒ±z_list:
        print(Fore.CYAN + f"       ‚ùì  Kayƒ±tsƒ±zlar  : {len(kayƒ±tsƒ±z_list)} barkod")
    if hasarli_dict:
        print(Fore.CYAN + f"       ‚ö†Ô∏è  Hasarlƒ±lar   : {len(hasarli_dict)} √ºr√ºn")

# Men√º
def menu():
    user_login()
    
    while True:
        welcome_screen()
        choice = input(Fore.WHITE + "    üéØ Se√ßiminiz: " + Style.RESET_ALL).strip()

        if choice == '1':
            barkodsuzlar()
        elif choice == '2':
            kayƒ±tsƒ±zlar()
        elif choice == '3':
            hasarlilar()
        elif choice == '4':
            print(Fore.YELLOW + "\n    üì¶ Veriler kaydediliyor...")
            save_to_excel()
            print(Fore.GREEN + Style.BRIGHT + "\n    ‚úì Program sonlandƒ±rƒ±ldƒ±. G√ºle g√ºle! üëã\n")
            break
        else:
            print(Fore.RED + "    ‚úó Ge√ßersiz se√ßim! L√ºtfen 1-4 arasƒ± bir sayƒ± girin.")
            input(Fore.YELLOW + "\n    ‚èé Devam etmek i√ßin Enter'a basƒ±n...")

# Programƒ± ba≈ülat
menu()